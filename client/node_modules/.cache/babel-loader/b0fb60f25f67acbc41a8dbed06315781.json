{"ast":null,"code":"import _slicedToArray from \"/Users/ruchikaashokbharati/Documents/Projects/Backend_Kahoot-main3/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\"],\n    _excluded2 = [\"colorSchemes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n      baseTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$defaultMode = options.defaultMode,\n      desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$prefix = options.prefix,\n      designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n      shouldSkipGeneratingVar = options.shouldSkipGeneratingVar;\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? {} : _ref$theme,\n        _ref$prefix = _ref.prefix,\n        prefix = _ref$prefix === void 0 ? designSystemPrefix : _ref$prefix,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? desisgnSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche;\n\n    var _baseTheme$colorSchem = baseTheme.colorSchemes,\n        baseColorSchemes = _baseTheme$colorSchem === void 0 ? {} : _baseTheme$colorSchem,\n        restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    var mergedTheme = deepmerge(restBaseTheme, restThemeProp);\n    var colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      defaultMode: defaultMode\n    }),\n        mode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        colorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var resolvedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }();\n\n    var _cssVarsParser = cssVarsParser(mergedTheme, {\n      prefix: prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar: shouldSkipGeneratingVar\n    }),\n        rootCss = _cssVarsParser.css,\n        rootVars = _cssVarsParser.vars;\n\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      colorSchemes: colorSchemes,\n      vars: rootVars\n    });\n    var styleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n          css = _cssVarsParser2.css,\n          vars = _cssVarsParser2.vars;\n\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme) {\n        document.body.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * Your component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * css variable prefix\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/Users/ruchikaashokbharati/Documents/Projects/Backend_Kahoot-main3/client/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","React","PropTypes","GlobalStyles","deepmerge","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","createCssVarsProvider","options","theme","baseTheme","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","basePrefix","rootCss","css","rootVars","vars","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","body","setAttribute","Provider","styles","propTypes","string","node","oneOfType","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = baseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    let mergedTheme = deepmerge(restBaseTheme, restThemeProp);\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      colorSchemes,\n      vars: rootVars\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        document.body.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * Your component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * css variable prefix\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}