{"ast":null,"code":"import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nvar SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n\nvar encodePayload = function encodePayload(packets, callback) {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  var length = packets.length;\n  var encodedPackets = new Array(length);\n  var count = 0;\n  packets.forEach(function (packet, i) {\n    // force base64 encoding for binary packets\n    encodePacket(packet, false, function (encodedPacket) {\n      encodedPackets[i] = encodedPacket;\n\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\n\nvar decodePayload = function decodePayload(encodedPayload, binaryType) {\n  var encodedPackets = encodedPayload.split(SEPARATOR);\n  var packets = [];\n\n  for (var i = 0; i < encodedPackets.length; i++) {\n    var decodedPacket = decodePacket(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n\n  return packets;\n};\n\nexport var protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };","map":{"version":3,"sources":["/Users/ruchikaashokbharati/Documents/Projects/Backend_Kahoot-main3/client/node_modules/engine.io-parser/build/esm/index.js"],"names":["encodePacket","decodePacket","SEPARATOR","String","fromCharCode","encodePayload","packets","callback","length","encodedPackets","Array","count","forEach","packet","i","encodedPacket","join","decodePayload","encodedPayload","binaryType","split","decodedPacket","push","type","protocol"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,IAAMC,SAAS,GAAGC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAAlB,C,CAA2C;;AAC3C,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,QAAV,EAAuB;AACzC;AACA,MAAMC,MAAM,GAAGF,OAAO,CAACE,MAAvB;AACA,MAAMC,cAAc,GAAG,IAAIC,KAAJ,CAAUF,MAAV,CAAvB;AACA,MAAIG,KAAK,GAAG,CAAZ;AACAL,EAAAA,OAAO,CAACM,OAAR,CAAgB,UAACC,MAAD,EAASC,CAAT,EAAe;AAC3B;AACAd,IAAAA,YAAY,CAACa,MAAD,EAAS,KAAT,EAAgB,UAAAE,aAAa,EAAI;AACzCN,MAAAA,cAAc,CAACK,CAAD,CAAd,GAAoBC,aAApB;;AACA,UAAI,EAAEJ,KAAF,KAAYH,MAAhB,EAAwB;AACpBD,QAAAA,QAAQ,CAACE,cAAc,CAACO,IAAf,CAAoBd,SAApB,CAAD,CAAR;AACH;AACJ,KALW,CAAZ;AAMH,GARD;AASH,CAdD;;AAeA,IAAMe,aAAa,GAAG,SAAhBA,aAAgB,CAACC,cAAD,EAAiBC,UAAjB,EAAgC;AAClD,MAAMV,cAAc,GAAGS,cAAc,CAACE,KAAf,CAAqBlB,SAArB,CAAvB;AACA,MAAMI,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACD,MAAnC,EAA2CM,CAAC,EAA5C,EAAgD;AAC5C,QAAMO,aAAa,GAAGpB,YAAY,CAACQ,cAAc,CAACK,CAAD,CAAf,EAAoBK,UAApB,CAAlC;AACAb,IAAAA,OAAO,CAACgB,IAAR,CAAaD,aAAb;;AACA,QAAIA,aAAa,CAACE,IAAd,KAAuB,OAA3B,EAAoC;AAChC;AACH;AACJ;;AACD,SAAOjB,OAAP;AACH,CAXD;;AAYA,OAAO,IAAMkB,QAAQ,GAAG,CAAjB;AACP,SAASxB,YAAT,EAAuBK,aAAvB,EAAsCJ,YAAtC,EAAoDgB,aAApD","sourcesContent":["import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\n"]},"metadata":{},"sourceType":"module"}