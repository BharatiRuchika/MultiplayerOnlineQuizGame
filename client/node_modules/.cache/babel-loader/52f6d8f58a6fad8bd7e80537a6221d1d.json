{"ast":null,"code":"var _jsxFileName = \"/Users/ruchikaashokbharati/Documents/Projects/Backend_Kahoot-main3/client/src/components/Game/Player.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { io } from 'socket.io-client';\nimport Socket from \"../../Socket\";\nimport PlayerQuestions from './Player_Questions';\nimport PlayerQuestionOver from './Player_Question_Over';\nimport './Game.css';\nimport Player_Game_Over from './Player_Game_Over';\nimport load from \"../../Assets/load-circle-outline.svg\"; // import sound from '../../Assets/ting.mp3';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Player extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pinCorrect: false,\n      gameStarted: false,\n      gameOver: false,\n      questionOver: false,\n      answerSubmitted: false,\n      answeredCorrect: false,\n      score: 0,\n      conn: 0\n    };\n    this.submitAnswer = this.submitAnswer.bind(this);\n    this.leaveRoom = this.leaveRoom.bind(this);\n  }\n\n  componentDidMount() {\n    var connectionOptions = {\n      \"force new connection\": true,\n      \"reconnect\": true,\n      \"reconnectionAttempts\": \"Infinity\",\n      \"timeout\": 10000,\n      \"transports\": [\"websocket\"]\n    };\n    console.log(\"socket\", this.Socket);\n    console.log(\"im here\");\n    console.log(\"props\", this.props);\n    console.log(\"props\", typeof this.props.selectedPin);\n    var pin = parseInt(this.props.selectedPin);\n    console.log(\"intprops\", typeof pin);\n    Socket.emit('player-joined', this.props);\n    Socket.emit('player-add', this.props);\n    console.log(\"player added\");\n    Socket.on('question-over', () => {\n      console.log(\"question over call\");\n      this.setState({\n        questionOver: true\n      });\n    });\n    Socket.on(\"game-over\", () => {\n      this.setState({\n        gameOver: true\n      });\n    });\n    Socket.on('next-question', () => {\n      this.setState({\n        gameStarted: true,\n        questionOver: false,\n        answerSubmitted: false,\n        answeredCorrect: false\n      });\n    });\n    Socket.on('sent-info', data => {\n      console.log(\"sent-info\", data);\n      console.log(this.state.score);\n      this.setState({\n        answeredCorrect: data.answeredCorrect,\n        score: this.state.score + data.score\n      });\n    });\n  }\n\n  submitAnswer(num) {\n    console.log(\"submit answer call\");\n    console.log(\"num\", num);\n    console.log(\"props\", this.props);\n    Socket.emit('question-answered', {\n      name: this.props.nickname,\n      answer: num,\n      pin: this.props.selectedPin\n    });\n    this.setState({\n      answerSubmitted: true\n    });\n  }\n\n  leaveRoom() {\n    Socket.emit('destroy', this.props.selectedPin);\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    console.log(this.props);\n    let {\n      gameStarted,\n      questionOver,\n      answerSubmitted,\n      gameOver\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"player-info\",\n          id: \"pin\",\n          children: [\"PIN:\", this.props.selectedPin]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.leaveRoom,\n          children: \"Leave room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), !gameStarted && !questionOver && !gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You're in!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 30\n          }, this), \"Do you see your nickname on the screen?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" q-blank q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" q-blank q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" q-blank q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" q-blank q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this) : gameStarted && !questionOver && !answerSubmitted && !gameOver ? /*#__PURE__*/_jsxDEV(PlayerQuestions, {\n        submitAnswer: this.submitAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }, this) : gameStarted && !questionOver && answerSubmitted && !gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"waiting-for-results\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"answer-indicator\",\n          id: \"too-fast\",\n          children: \"Did You answer too fast????\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: load,\n          alt: \"\",\n          className: \"load-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this) : gameStarted && questionOver && answerSubmitted && !gameOver ? /*#__PURE__*/_jsxDEV(PlayerQuestionOver, {\n        answeredCorrect: this.state.answeredCorrect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Player_Game_Over, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"player-info\",\n          children: this.props.nickname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: gameStarted && !questionOver && answerSubmitted ? 'status-bar-hidden' : 'status-bar-score',\n          children: this.state.score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(\"state\", state);\n  return {\n    selectedPin: state.selectedPin,\n    nickname: state.nickname\n  };\n}\n\nexport default connect(mapStateToProps)(Player);","map":{"version":3,"sources":["/Users/ruchikaashokbharati/Documents/Projects/Backend_Kahoot-main3/client/src/components/Game/Player.js"],"names":["React","Component","connect","io","Socket","PlayerQuestions","PlayerQuestionOver","Player_Game_Over","Player","constructor","props","state","pinCorrect","gameStarted","gameOver","questionOver","answerSubmitted","answeredCorrect","score","conn","submitAnswer","bind","leaveRoom","componentDidMount","connectionOptions","console","log","selectedPin","pin","parseInt","emit","on","setState","data","num","name","nickname","answer","history","push","render","load","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {io} from 'socket.io-client';\nimport Socket from \"../../Socket\";\nimport PlayerQuestions from './Player_Questions';\nimport PlayerQuestionOver from './Player_Question_Over';\nimport './Game.css';\nimport Player_Game_Over from './Player_Game_Over';\nimport load from '../../Assets/load-circle-outline.svg'\n// import sound from '../../Assets/ting.mp3';\nclass Player extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            pinCorrect: false,\n            gameStarted: false,\n            gameOver:false,\n            questionOver: false,\n            answerSubmitted: false,\n            answeredCorrect: false,\n            score: 0,\n            conn:0\n        }\n        this.submitAnswer = this.submitAnswer.bind(this);\n        this.leaveRoom = this.leaveRoom.bind(this);\n        \n   \n    }\n    componentDidMount() {\n      \n        var connectionOptions = {\n            \"force new connection\" : true,\n            \"reconnect\":true,\n            \"reconnectionAttempts\": \"Infinity\",\n            \"timeout\" : 10000,\t\t\t\t\n            \"transports\" : [\"websocket\"]\n        };\n       \n        console.log(\"socket\",this.Socket);\n      \n        console.log(\"im here\");\n        console.log(\"props\",this.props);\n        console.log(\"props\",typeof this.props.selectedPin);\n        var pin = parseInt(this.props.selectedPin);\n        console.log(\"intprops\",typeof pin);\n        Socket.emit('player-joined', this.props);\n        Socket.emit('player-add', this.props)\n        console.log(\"player added\");\n        Socket.on('question-over', () => {\n            console.log(\"question over call\");\n            this.setState({\n                questionOver: true\n            })\n        })\n        Socket.on(\"game-over\",()=>{\n            this.setState({\n                gameOver: true\n            })\n        })\n        Socket.on('next-question', () => {\n            this.setState({\n                gameStarted: true,\n                questionOver: false,\n                answerSubmitted: false,\n                answeredCorrect: false\n            })\n        })\n        Socket.on('sent-info', data => {\n            console.log(\"sent-info\",data);\n            console.log(this.state.score);\n            this.setState({\n              answeredCorrect: data.answeredCorrect,\n              score: this.state.score + data.score\n            })\n        })\n      \n    }\n    submitAnswer(num){ \n        console.log(\"submit answer call\");\n        console.log(\"num\",num);\n        console.log(\"props\",this.props);\n        Socket.emit('question-answered', {name: this.props.nickname, answer: num, pin: this.props.selectedPin})\n        this.setState({\n            answerSubmitted: true\n        })\n    }\n    leaveRoom(){\n        Socket.emit('destroy',this.props.selectedPin); \n        this.props.history.push(\"/\");\n    }\n    render() {\n        console.log(this.props)\n        let { gameStarted, questionOver, answerSubmitted ,gameOver} = this.state;\n        return (\n            <div className='player-container' >\n                <div className='status-bar'>\n                    <p className='player-info' id='pin' >PIN:{this.props.selectedPin}</p>\n                    <button onClick={this.leaveRoom}>Leave room</button>\n                </div> \n                 \n                {\n                    !gameStarted && !questionOver && !gameOver\n                    ?\n                    <div>\n                            <p>You're in!\n                             <br />\n                                Do you see your nickname on the screen?\n                            </p>\n                             <div className='answer-container'>\n                                    <div className=' q-blank q'></div> \n                                    <div className=' q-blank q'></div> \n                                    <div className=' q-blank q'></div> \n                                    <div className=' q-blank q'></div> \n                             </div> \n                        </div>\n                        :\n                        gameStarted && !questionOver && !answerSubmitted && !gameOver\n                        ?\n                        <PlayerQuestions submitAnswer ={this.submitAnswer} />\n                        :\n                        gameStarted && !questionOver && answerSubmitted && !gameOver\n                        ?\n                        <div className='waiting-for-results' >\n                            <p className='answer-indicator' id= 'too-fast'>Did You answer too fast????</p>\n                            <img src={load} alt='' className='load-circle' />\n                        </div> \n                        :\n                        gameStarted && questionOver && answerSubmitted && !gameOver\n                        ?\n                        <PlayerQuestionOver\n                         answeredCorrect={this.state.answeredCorrect}\n                        />\n                        :\n                        <Player_Game_Over/>\n                    }\n                    <div className='status-bar' >\n                    \n                    <p className='player-info'>{this.props.nickname}</p>\n                    <div \n                        className={ \n                          gameStarted && !questionOver && answerSubmitted\n                          ?\n                          'status-bar-hidden'\n                          :\n                          'status-bar-score'\n                        }\n                         >{this.state.score}</div> \n                    </div> \n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    console.log(\"state\",state);\n    return {\n        selectedPin: state.selectedPin,\n        nickname: state.nickname\n    }\n}\n\nexport default connect(mapStateToProps)(Player);"]},"metadata":{},"sourceType":"module"}